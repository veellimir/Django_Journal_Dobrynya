import { fetchEvents, fetchAttendance, getCancelEvent } from "./api_get.js";

getCancelEvent();

let today = new Date(),
    currentMonth = today.getMonth() + 1,
    currentYear = today.getFullYear(),
    attendanceData = [];

const months = [
  "Январь",
  "Февраль",
  "Март",
  "Апрель",
  "Май",
  "Июнь",
  "Июль",
  "Август",
  "Сентябрь",
  "Октябрь",
  "Ноябрь",
  "Декабрь",
],
weekdays = ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"],
spinner = document.querySelector('.spinner');

document.addEventListener("DOMContentLoaded", function () {

  function displayEvents() {
    Promise.all([fetchEvents(), fetchAttendance(currentMonth, currentYear)])
      .then(([events, attendance]) => {
        attendanceData = attendance;
        generateCalendar(currentMonth - 1, currentYear, events);
        if (spinner) {
          spinner.style.display = 'none';
        }
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        generateCalendar(currentMonth - 1, currentYear, []);
      });
  }

  function generateCalendar(month, year, events) {
    let firstDay = new Date(year, month, 1),
      lastDay = new Date(year, month + 1, 0),
      numDays = lastDay.getDate(),
      startingDay = (firstDay.getDay() + 6) % 7;

    document.getElementById("month-year").textContent = `${months[month]} ${year}`;

    let calendarDates = document.getElementById("calendar-dates");
    if (calendarDates) {
      calendarDates.innerHTML = "";
    }

    let weekdaysRow = document.getElementById("weekdays");
    if (weekdaysRow) {
      weekdaysRow.innerHTML = weekdays.map((day) => `<th>${day}</th>`).join("");
    }

    let date = 1,
      currentWeekday = startingDay;

    for (let i = 0; i < 6; i++) {
      let row = document.createElement("tr");

      for (let j = 0; j < 7; j++) {
        let cell = document.createElement("td");

        if ((i === 0 && j < startingDay) || date > numDays) {
          cell.textContent = "";
        } else {
          let eventDiv = document.createElement("div");
          eventDiv.textContent = date;
          cell.appendChild(eventDiv);

          let currentDayOfWeek = weekdays[currentWeekday];
          cell.setAttribute("data-weekday", currentDayOfWeek);

          const cellDate = new Date(year, month, date);

          if (cellDate < today) {
            cell.style.backgroundColor = "#d3d3d3";
          }

          cell.addEventListener("click", () => {
            handleDateClick(cell);
          });

          updateEvents(cell, date, currentDayOfWeek, events);
          date++;

          currentWeekday = (currentWeekday + 1) % 7;
        }
        row.appendChild(cell);
      }
      calendarDates.appendChild(row);
    }
  }
  
  

  function updateEvents(cell, date, currentDayOfWeek, events) {
    const today = new Date(),
          cellDate = new Date(currentYear, currentMonth - 1, date);
  
    if (events && events.length > 0) {
      events.forEach((event) => {
        if (event.days_of_week.includes(currentDayOfWeek.toLowerCase())) {
          let eventNameDiv = document.createElement("div"),
              displayText = `${event.training_direction_name} <br> ${event.start_time} - ${event.end_time}`;
  
          eventNameDiv.innerHTML = displayText;
          eventNameDiv.classList.add("event-name");
          eventNameDiv.style.backgroundColor = event.elem_color;
  
          if (cellDate < today) {
            eventNameDiv.style.backgroundColor = "#CCFFCC"; // Для прошедших занятий делаем другой цвет
          }
  
          // Проверяем отмененные события
          getCancelEvent().then((cancelEvents) => {
            cancelEvents.forEach((cancelEvent) => {
              const cancelDate = new Date(cancelEvent.cancelled_date);
              if (
                cancelDate.getFullYear() === cellDate.getFullYear() &&
                cancelDate.getMonth() === cellDate.getMonth() &&
                cancelDate.getDate() === cellDate.getDate() &&
                event.training_direction_name === cancelEvent.cancelled_title // Проверяем название занятия
              ) {
                eventNameDiv.style.backgroundColor = cancelEvent.cancelled_red_color; // Меняем цвет на красный для отмененных занятий
              }
            });
          });
  
          cell.appendChild(eventNameDiv);
  
          eventNameDiv.addEventListener("click", () => {
            openModal(event, date);
          });
        }
      });
    }
  }
  

  function handleDateClick(cell) {
    const dayDiv = cell.querySelector("div"),
          dayNumber = dayDiv ? parseInt(dayDiv.textContent, 10) : null;

    if (dayNumber === null) {
      return null;
    }
    return {
      date: new Date(currentYear, currentMonth - 1, dayNumber),
      dayNumber: dayNumber,
    };
  }

  function openModal(event, date) {
    const coachDetails = event.teacher.map((coach) => `${coach.surname} ${coach.name} ${coach.patronymic}`).join(", "),
          modal = document.getElementById("modal"),
          modalTeacher = document.getElementById("modal-teacher"),
          modalTitle = document.getElementById("modal-title"),
          modalName = document.getElementById("modal-name"),
          modalStartTime = document.getElementById("modal-start_time"),
          modalEndTime = document.getElementById("modal-end_time"),
          modalProfileUser = document.getElementById("modal-profile_user"),
          blockCancelLesson = document.querySelector('.customCancelLesson');

    if (event.teacher.length === 0) {
      modalTeacher.textContent = "Преподаватель: преподаватель ещё не назначен";
    } else if (event.teacher.length === 1) {
      modalTeacher.textContent = `Преподаватель: ${coachDetails}`;
    } else {
      const lastIndex = coachDetails.lastIndexOf(", "),
            coaches = coachDetails.substring(0, lastIndex),
            lastCoach = coachDetails.substring(lastIndex + 2);

      modalTeacher.textContent = `Преподаватели: ${coaches}, ${lastCoach}`;
    }

    modalName.textContent = event.training_direction_name;
    modalTitle.textContent = `Описания: ${event.title}`;
    modalStartTime.textContent = `Время начало: ${event.start_time}`;
    modalEndTime.textContent = `Конец в: ${event.end_time}`;

    modal.style.display = "block";
    const formatDate = (date) => {
      if (!date) return null;
      const d = new Date(date),
            year = d.getFullYear(),
            month = String(d.getMonth() + 1).padStart(2, "0"),
            day = String(d.getDate()).padStart(2, "0");
      return `${year}-${month}-${day}`;
    };
    const eventDate = new Date(currentYear, currentMonth - 1, date);
    if (eventDate < today) {
        blockCancelLesson.style.display = "none";
    } else {
      blockCancelLesson.style.display = "";
    }

    const matchingAttendees = attendanceData.filter((att) => {
      const attendanceDateString = formatDate(att.date),
            formattedMonth = String(currentMonth).padStart(2, "0"),
            formattedDate = String(date).padStart(2, "0"),
            selectCurrentDate = `${currentYear}-${formattedMonth}-${formattedDate}`;

      return (
        attendanceDateString === selectCurrentDate &&
        att.training_direction_name === event.training_direction_name
      );
    });

    const participantInfo =
      matchingAttendees.length > 0
        ? matchingAttendees
            .map(
              (att) => `${att.profile_surname} ${att.is_present ? "✅" : "❌"}`
            )
            .join("<br> ")
        : "Нет данных о посещении";

    modalProfileUser.innerHTML = `Посещаемость участников: <hr> ${participantInfo}`;
    modal.style.display = "block";
  }

  function closeModal() {
    const modal = document.getElementById("modal");

    modal.style.display = "none";
  }

  const span = document.getElementsByClassName("close")[0];
  if (span) {
    span.addEventListener("click", closeModal);
  }

  window.addEventListener("click", (event) => {
    const modal = document.getElementById("modal");
    if (modal && event.target === modal) {
      closeModal();
    }
  });

  const previousMonth = document.querySelector(".previousMonth"),
        nextMonth = document.querySelector(".nextMonth"),
        currentMY = document.getElementById("month-year");

  if (previousMonth && nextMonth) {
    if (currentMY.textContent === "Октябрь 2024") {
      previousMonth.style.display = "none";
      previousMonth.disabled = true;
    }

    previousMonth.addEventListener("click", () => {
      if (currentMY.textContent !== "Октябрь 2024") {
        currentMonth--;
        if (currentMonth < 1) {
          currentMonth = 12;
          currentYear--;
        }
        displayEvents(new Date(currentYear, currentMonth));
      }
    });

    nextMonth.addEventListener("click", () => {
      currentMonth++;
      if (currentMonth > 12) {
        currentMonth = 1;
        currentYear++;
      }
      displayEvents(new Date(currentYear, currentMonth - 1));
    });
  }

  displayEvents(new Date(currentYear, currentMonth - 1));

  const btnCancelWorkout = document.getElementById("cancelWorkout");

  if (btnCancelWorkout) {
    btnCancelWorkout.addEventListener("click", () => {
        btnCancelWorkout.style.display = "none";
    });
  }
});
